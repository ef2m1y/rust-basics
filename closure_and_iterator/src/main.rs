fn main() {
    let c1 = |x: i32| x + 1;
    println!("{}", c1(10));

    // クロージャはクロージャ宣言時の自由変数mの状態をクロージャ内に閉じ込める
    // -> 環境をキャプチャする -> closure
    let m = 10;
    let c2 = |x: i32| x + m;
    println!("{}", c2(3));

    let m = 20;
    println!("{}", c2(3));

    // 自由変数が閉じ込められる際, 自由変数が束縛している値がCopyトレイトを
    // 実装しているならばcopyが作成され, 実装されていない場合は参照を受け取る

    // (ベクタはCopyトレイトが実装されていないため, 参照を渡す)
    let v1 = vec![1, 2, 3];
    let c3 = || {
        println!("{:?}", v1);
    };
    c3();
    println!("{:?}", v1); // ok

    // (強制的にmoveを起こすことが可能)
    let v2 = vec![1, 2, 3];
    let c4 = move || {
        println!("{:?}", v2);
    };
    c3();
    // println!("{:?}", v2); // err
}
