fn main() {
    let a = 100;
    {
        let mut v1 = vec![1, 2, 3];
        println!("{:?}", v1);

        let v2 = v1;
        println!("{:?}", v2);

        // v1.push(4);
    }    
    println!("{a}");
}

// [ダングリングポインタ]------------------------------------------
// 無効なメモリ領域を指すポインタはダングリングポインタと呼ばれる。
// 特に, 本来有効だったメモリ領域が解放処理などによって無効化されたにも関わらず, 
// そのメモリ領域を参照し続けているポインタのことをダングリングポインタと呼ぶ。

// 所有権のルール3(TRPL): "所有者(=変数)がスコープを外れたら, その所有者(=変数)が所有するメモリ上の値も破棄される"
// -> つまり, "メモリの生存期間(=lifetime)が, そのメモリを所有している変数のスコープと同じ"
// -> また, コンパイル時に所有権のチェックが行われる仕様である
// -> コンパイル時に, (lifetimeを超えて, )解放済みメモリの参照が行われていないか判定可能である(-> compile error!)
// ----------------------------------------------------------------